using Complex.ConsoleApp;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

var inputFile = args.Length > 0 ? args[0] : null;
if (inputFile is null || !(
        inputFile.EndsWith(".csproj", StringComparison.InvariantCultureIgnoreCase) ||
        inputFile.EndsWith(".sln", StringComparison.InvariantCultureIgnoreCase)))
{
    Console.WriteLine(Resources.FileInputMissingOrInvalid);
    return;
}
var directory = Path.GetDirectoryName(Path.GetFullPath(inputFile)) ?? Directory.GetCurrentDirectory();
var files = Directory.GetFiles(directory, "*.cs", SearchOption.AllDirectories)
    .Where(f =>
#pragma warning disable CA1307
        !f.Contains($"{Path.DirectorySeparatorChar}bin{Path.DirectorySeparatorChar}") &&
        !f.Contains($"{Path.DirectorySeparatorChar}obj{Path.DirectorySeparatorChar}") &&
#pragma warning restore CA1307
        !IsAutoGeneratedFile(f)
    ).ToArray();
// should ignore everything in /bin /obj and autogenerated files

foreach (var file in files)
{
    var code = File.ReadAllText(file);
    var fileName = Path.GetFileName(file);
    // var tree = CSharpSyntaxTree.ParseText(code);
    // var root = tree.GetRoot();

    var complexity = 0;
    var description = string.Empty;
    try
    {
        complexity = CodeMetricsCalculator.CalculateComplexity(code);
    }
#pragma warning disable CA1031
    catch (Exception e)
#pragma warning restore CA1031
    {
        description = e.Message;
    }

    Console.WriteLine($"{fileName} :: Cyclomatic Complexity: {complexity}. {(string.IsNullOrWhiteSpace(description) ? string.Empty : description)}");

    // var methods = root.DescendantNodes().OfType<MethodDeclarationSyntax>();
    // foreach (var method in methods)
    // {
    //     var complexity = CodeMetricsCalculator.CalculateComplexity(method.ToFullString());
    //     Console.WriteLine($"{file}::{method.Identifier} - Cyclomatic Complexity: {complexity}");
    // }
}

static bool IsAutoGeneratedFile(string filePath)
{
    var firstLines = File.ReadLines(filePath).Take(10).ToList();
    return firstLines.Any(line =>
        line.Contains("<auto-generated", StringComparison.InvariantCultureIgnoreCase) ||
        line.Contains("<autogenerated", StringComparison.InvariantCultureIgnoreCase) ||
        line.Contains("// <auto-generated>", StringComparison.InvariantCultureIgnoreCase) ||
        line.Contains("// <autogenerated>", StringComparison.InvariantCultureIgnoreCase)
    );
}
